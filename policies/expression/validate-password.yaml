version: 1
metadata:
  name: Expression Policy - Validate Password
context: {}
entries:
#~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
- model: authentik_blueprints.metaapplyblueprint
  attrs:
    identifiers:
      name: Password Policy - Default
    required: true

- model: authentik_blueprints.metaapplyblueprint
  attrs:
    identifiers:
      name: Password Policy - Secure
    required: true
#~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
- model: authentik_policies_expression.expressionpolicy
  id: validate-password-expression-policy
  identifiers:
    name: validate-password-expression-policy
  attrs:
    expression: |
      from authentik.lib.config import CONFIG

      # If request.user == AnonymousUser these will be taken from the DEFAULT
      # tenant. If no default tenant is present it will fall back to the
      # defaults set in this expression policy
      USER_ATTRIBUTE_ADMIN_PASSWORD_POLICY = "better-blueprints/admins/password-policy"
      USER_ATTRIBUTE_USER_PASSWORD_POLICY = "better-blueprints/users/password-policy"

      admin_policy = request.user.group_attributes(request.http_request).get(
          USER_ATTRIBUTE_ADMIN_PASSWORD_POLICY,
          CONFIG.y(
              "better_blueprints_default.admins.password_policy", # ENV: AUTHENTIK_BETTER_BLUEPRINTS_DEFAULT__ADMINS__PASSWORD_POLICY
              "secure-password-policy"
          )
      )

      user_policy = request.user.group_attributes(request.http_request).get(
          USER_ATTRIBUTE_USER_PASSWORD_POLICY,
          CONFIG.y(
              "better_blueprints_default.users.password_policy", # ENV: AUTHENTIK_BETTER_BLUEPRINTS_DEFAULT__USERS__PASSWORD_POLICY
              "default-password-policy"
          )
      )

      if request.user.is_superuser:
          result = ak_call_policy(admin_policy)
      else:
          result = ak_call_policy(user_policy)

      for msg in result.messages:
          ak_message(msg)

      return result.passing

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
