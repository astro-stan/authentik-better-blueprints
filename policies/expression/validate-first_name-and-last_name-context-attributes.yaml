version: 1
metadata:
  name: Expression Policy - Validate first_name and last_name Context Attributes
context: {}
entries:
#~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
- model: authentik_policies_expression.expressionpolicy
  id: validate-first_name-and-last_name-context-attributes-expression-policy
  identifiers:
    name: validate-first_name-and-last_name-context-attributes-expression-policy
  attrs:
    expression:  |
      # If request.use == AnonymousUser these will be taken from the DEFAULT
      # tenant. If no default tenant is present it will fall back to the
      # defaults set in this expression policy
      USER_ATTRIBUTE_MIN_NAME_CHARS = "better-blueprints/user/name-min-chars"
      USER_ATTRIBUTE_MAX_NAME_CHARS = "better-blueprints/user/name-max-chars"
      USER_ATTRIBUTE_NAME_REGEX = "better-blueprints/user/name-regex"

      first_name = request.context.get("prompt_data", {}).get("first_name")
      last_name = request.context.get("prompt_data", {}).get("last_name")

      min_name_chars = int(request.user.group_attributes(request.http_request).get(
          USER_ATTRIBUTE_MIN_NAME_CHARS, 2
      ))
      max_name_chars = int(request.user.group_attributes(request.http_request).get(
          USER_ATTRIBUTE_MAX_NAME_CHARS, 20
      ))
      allowed_chars_in_name = str(request.user.group_attributes(request.http_request).get(
          USER_ATTRIBUTE_NAME_REGEX, "a-zA-Z"
      ))

      name_regex = (
          "^["
          f"{allowed_chars_in_name}"
          "]{"
          f"{min_name_chars},{max_name_chars}"
          "}$"
      )
      err_msg = (
          "'{name}' "
          f"must be between {min_name_chars}-{max_name_chars} characters in length "
          f"and contain only {allowed_chars_in_name} characters."
      )

      valid = True

      if not first_name or not last_name:
          return False

      if not regex_match(first_name, name_regex):
          ak_message(err_msg.format(name="First name"))
          valid = False
      if not regex_match(last_name, name_regex):
          ak_message(err_msg.format(name="Last name"))
          valid = False

      return valid
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
