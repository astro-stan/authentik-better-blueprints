version: 1
metadata:
  name: Expression Policy - Validate token For Invitations Context Attribute
context: {}
entries:
#~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
- model: authentik_blueprints.metaapplyblueprint
  attrs:
    identifiers:
      name: Expression Policy - Validate Generic Prompt Field Data
    required: true
#~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
- model: authentik_policies_expression.expressionpolicy
  id: validate-token-for-invitations-context-attribute-expression-policy
  identifiers:
    name: validate-token-for-invitations-context-attribute-expression-policy
  attrs:
    expression:  |
      from uuid import UUID

      def validator(x):
          try:
              if UUID(str(x)).version == 4:
                  return True
          except ValueError:
              pass
          return False

      result = ak_call_policy(
          "validate-generic-prompt-field-data-expression-policy",
          _validator=validator,
          _fields=("token",),
      )

      if not result.passing:
          token = request.context.get("prompt_data", {}).get("token", "")
          ak_message('"' + str(token) + '"' + " is not a valid invitation.")

      return result.passing
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
