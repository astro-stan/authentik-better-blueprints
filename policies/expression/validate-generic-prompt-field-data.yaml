version: 1
metadata:
  name: Expression Policy - Validate Generic Prompt Field Data
context: {}
entries:
#~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dependency blueprints ~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~ Notification transports ~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Groups ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
- model: authentik_policies_expression.expressionpolicy
  id: validate-generic-prompt-field-data-expression-policy
  identifiers:
    name: validate-generic-prompt-field-data-expression-policy
  attrs:
    expression:  |
      # Designed to be called from other expression policies.
      # Used to validate arbitrary fields located in `request.context["prompt_data"]`
      # If any of the specied fields fail validation the policy returns `False`.
      #
      # It requires the following extra keys to be present in `request.context`:
      # - _validator: Callable[[Any], bool]
      #   A callable to use to validate all fields
      # - _fields: Union[List[str], Tuple[str, ...]]
      #   The keys of the fields in `request.context["prompt_data"]` which should
      #   be validated
      validator = request.context.get("_validator")
      fields = request.context.get("_fields")
      prompt_data = request.context.get("prompt_data")

      error = False

      if validator is None:
          ak_logger.warning(
              "Validator was not provided in context",
              context=request.context,
          )
          error = True

      if prompt_data is None:
          ak_logger.warning(
              "prompt_data not present in context",
              context=request.context,
          )
          error = True

      if not isinstance(fields, (tuple, list)) or not len(fields):
          ak_logger.warning(
              "No field keys were provided in context",
              context=request.context,
          )
          error = True

      if isinstance(fields, (tuple, list)) and prompt_data:
          for field in fields:
              if field not in prompt_data:
                  ak_logger.warning(
                      f"{field} not in prompt_data",
                      prompt_data=prompt_data,
                  )
                  error = True

      if error:
          return False

      for field in fields:
          if not validator(prompt_data[field]):
              return False

      return True
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Flows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Prompts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stages ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Policy bindings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Tenants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
